---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import Footer from '../../components/Footer.astro';

export async function getStaticPaths() {
  const articles = await getCollection('articles');
  return articles.map(article => ({
    params: { slug: article.slug },
    props: { article },
  }));
}

const { article } = Astro.props;
type Props = {
  article: CollectionEntry<'articles'>;
};
const { Content } = await article.render();

// Get related articles based on tags
const allArticles = await getCollection('articles');
const relatedArticles = allArticles
  .filter(a => a.slug !== article.slug) // Exclude current article
  .filter(a => a.data.tags.some(tag => article.data.tags.includes(tag))) // Must share at least one tag
  .sort((a, b) => {
    // Count matching tags to prioritize articles with more tag matches
    const aMatches = a.data.tags.filter(tag => article.data.tags.includes(tag)).length;
    const bMatches = b.data.tags.filter(tag => article.data.tags.includes(tag)).length;
    return bMatches - aMatches;
  })
  .slice(0, 3); // Limit to 3 related articles
---

<Layout 
  title={`${article.data.title} - amotivv`}
  description={article.data.description}
  type="article"
  publishDate={article.data.publishDate}
  keywords={[...article.data.tags, "AI consulting", "artificial intelligence"]}
>
  <Navigation />
  <main>
    <article class="pt-32 md:pt-40 pb-24 bg-off-white">
      <div class="container mx-auto px-6 md:px-8">
        <div class="max-w-3xl mx-auto">
          <!-- Visual Breadcrumbs -->
          <nav class="flex items-center text-sm mb-6 text-dark-gray/60">
            <a href="/" class="hover:text-primary transition-colors">Home</a>
            <svg class="w-3 h-3 mx-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
            <a href="/articles" class="hover:text-primary transition-colors">Articles</a>
            <svg class="w-3 h-3 mx-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
            <span class="truncate max-w-[200px]" aria-current="page">{article.data.title}</span>
          </nav>
          
          <!-- Title and metadata stay outside the white container -->
          <h1 class="text-4xl md:text-5xl font-medium mb-6 text-secondary">
            {article.data.title}
          </h1>
    
          <div class="flex flex-wrap gap-2 mb-8">
            {article.data.tags.map(tag => (
              <span class="px-3 py-1 bg-primary/5 text-primary/80 rounded-full text-sm">
                {tag}
              </span>
            ))}
          </div>
          
          <div class="flex items-center gap-4 mb-12 pb-8 border-b border-light-gray">
            <img 
              src={article.data.author.avatar || '/avatars/default.svg'} 
              alt={article.data.author.name}
              class="w-10 h-10 rounded-full"
              onerror="this.src='/avatars/default.svg'"
            />
            <div>
              <div class="font-medium text-secondary">{article.data.author.name}</div>
              <div class="text-sm text-dark-gray/60">{article.data.author.title}</div>
            </div>
            <time class="text-sm text-dark-gray/60 ml-auto">
              {new Date(article.data.publishDate).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>
          </div>
    
          <!-- Article content in white container -->
          <div class="bg-white rounded-2xl p-8 md:p-12 shadow-sm">
            <div class="prose max-w-none text-dark-gray/80">
              <Content />
            </div>
          </div>
          
          <!-- Related Articles Section -->
          {relatedArticles.length > 0 && (
            <div class="mt-16">
              <h2 class="text-2xl font-medium text-secondary mb-8">Related Articles</h2>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                {relatedArticles.map(relatedArticle => (
                  <a 
                    href={`/articles/${relatedArticle.slug}`}
                    class="group bg-white rounded-2xl p-6 shadow-sm hover:shadow-lg transition-all duration-300 flex flex-col h-full"
                  >
                    <h3 class="text-lg font-medium text-secondary mb-2 group-hover:text-primary transition-colors line-clamp-2">
                      {relatedArticle.data.title}
                    </h3>
                    
                    <time class="text-xs text-primary/70 mb-3 block">
                      {new Date(relatedArticle.data.publishDate).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric'
                      })}
                    </time>
                    
                    <p class="text-dark-gray/60 text-sm mb-4 flex-grow line-clamp-2">
                      {relatedArticle.data.description}
                    </p>
                    
                    <div class="mt-auto">
                      <div class="flex flex-wrap gap-1 mb-2">
                        {relatedArticle.data.tags.slice(0, 2).map(tag => (
                          <span class="px-2 py-1 bg-primary/5 text-primary/80 rounded-full text-xs">
                            {tag}
                          </span>
                        ))}
                      </div>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </article>
  </main>
  <Footer />
</Layout>
