---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import Footer from '../../components/Footer.astro';
import { getCollection } from 'astro:content';

const articles = await getCollection('articles');
const sortedArticles = articles.sort((a, b) => {
  return new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime();
});
---

<Layout 
  title="Articles - amotivv"
  description="Explore our collection of articles on AI implementation, digital strategy, and identity. Gain insights from our experts on the latest trends and best practices."
  keywords={["AI articles", "artificial intelligence insights", "digital strategy", "AI implementation", "technology articles"]}
>
  <Navigation />
  <main>
    <section class="pt-32 md:pt-40 pb-24 bg-off-white">
      <div class="container mx-auto px-6 md:px-8">
        <div class="max-w-4xl mx-auto">
          <h1 class="text-4xl md:text-5xl font-medium mb-6 text-secondary">Articles</h1>
          <p class="text-dark-gray/60 mb-16">Insights and guides on AI implementation, digital strategy and identity</p>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {sortedArticles.map(article => (
              <a 
                href={`/articles/${article.slug}`}
                class="group bg-white rounded-2xl p-6 shadow-sm hover:shadow-lg transition-all duration-300 flex flex-col h-full"
              >
                <h2 class="text-xl font-medium text-secondary mb-2 group-hover:text-primary transition-colors line-clamp-2">
                  {article.data.title}
                </h2>
                
                <time class="text-sm text-primary/70 mb-3 block">
                  {new Date(article.data.publishDate).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                  })}
                </time>
                
                <p class="text-dark-gray/60 mb-4 flex-grow line-clamp-3">
                  {article.data.description}
                </p>
                
                <div class="mt-auto">
                  <div class="flex flex-wrap gap-2 mb-3">
                    {article.data.tags.slice(0, 3).map(tag => (
                      <span class="px-3 py-1 bg-primary/5 text-primary/80 rounded-full text-xs">
                        {tag}
                      </span>
                    ))}
                    {article.data.tags.length > 3 && (
                      <span class="px-3 py-1 bg-primary/5 text-primary/60 rounded-full text-xs">
                        +{article.data.tags.length - 3}
                      </span>
                    )}
                  </div>
                  
                  <div class="flex justify-end">
                    <svg 
                      class="w-5 h-5 text-dark-gray/30 group-hover:text-primary transition-colors" 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path 
                        stroke-linecap="round" 
                        stroke-linejoin="round" 
                        stroke-width="2" 
                        d="M9 5l7 7-7 7"
                      />
                    </svg>
                  </div>
                </div>
              </a>
            ))}
          </div>
        </div>
      </div>
    </section>
  </main>
  <Footer />
</Layout>
